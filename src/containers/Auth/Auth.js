import React, {Component} from 'react';
import {connect} from 'react-redux';
import {Redirect} from 'react-router-dom';
import {updateObject, checkValidity} from '../../shared/utility';

import Input from '../../components/UI/Input/Input';
import Button from '../../components/UI/Button/Button';
import Spinner from '../../components/UI/Spinner/Spinner';
import csS from './Auth.css'
import * as actions from '../../store/actions/index';


class Auth extends Component {
state = {
	controls: {
		email: {
				elementType: 'input',
				elementFrame: {
					type: 'email',
					placeholder: 'Your E-mail'
				},
				value: '',
				validation: {
					required: true,
					isEmail: true
				},
				valid: false,
				touched: false
			},
	password: {
				elementType: 'input',
				elementFrame: {
					type: 'password',
					placeholder: 'Password'
				},
				value: '',
				validation: {
					required: true,
					minLength: 6
				},
				valid: false,
				touched: false
			},
	},
	isSignUp: true
}
componentDidMount() { //this checks if we are building a burger and if we have changed the redirectpath by clicking on the 'ORDER NOW' button, only then will we be redirected to the '/' page
	if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {
		this.props.onSetAuthRedirectPath(); //(state: auth: null, ingr: null authRedirectPath changed by button) 0 ingr, 0 auth ORDER NOW => Auth => '/' 
		// (state: auth: null, ingr: 2, authRedirectPath was not changed) 2 ingr, 0 auth Authenticate => auth => '/'
	}
}

inputChangedHandler = (event, controlName) => { //tracks user input
	const updatedControls = updateObject(this.state.controls, {
		[controlName]: updateObject(this.state.controls[controlName], {
			value: event.target.value,
			valid: checkValidity(event.target.value, this.state.controls[controlName].validation),
			touched: true
	})
	});
	this.setState({controls: updatedControls});
}

submitHandler = event => {
	event.preventDefault();
	this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp)
}

switchAuthModeHandler = () => { //toggle between 'create account' and 'login'
	this.setState(prevState => {
		return {isSignUp: !prevState.isSignUp}
	});
}

	render () {
		const formElementsArray = []; 
		for (let key in this.state.controls) {
		formElementsArray.push({
			id: key,
			frame: this.state.controls[key]
		});
	}
	let form = formElementsArray.map(formElement => ( // creates our inputs
		<Input
			key={formElement.id}
			elementType={formElement.frame.elementType}
			elementFrame={formElement.frame.elementFrame}
			changed={(event) => this.inputChangedHandler(event, formElement.id)}
			value={formElement.frame.value}
			shouldValidate={formElement.frame.validation}
			touched={formElement.frame.touched}
			invalid={!formElement.frame.valid} />
	));

	if (this.props.loading) {
		form = <Spinner />
	}
	let errorMessage = null;
	if (this.props.error) { //outputs error message generated by firebase authentication
		errorMessage = (
			<p style={{color:'red',fontWeight: 'bold'}} >{this.props.error.message}</p>
		);
	}
	let authRedirect = null;
	if (this.props.isAuthenticated) { //will redirect users to the authRedirectPath if they are authenticated and have ingredients and have reached the auth page by clicking on button. Once they sign in
		// (state: auth: null, ingr:2, redirect path changed by button) ORDER NOW => auth => '/checkout'
		authRedirect = <Redirect to={this.props.authRedirectPath} /> 
	}

		return (
			<div className={csS.Auth}>
				{authRedirect}
				{errorMessage}
				<form onSubmit={this.submitHandler}>
					{form}
					<Button btnType="Success">{this.state.isSignUp ? 'Create Account' : 'Login'}</Button>
				</form>
				<Button 
					clicked={this.switchAuthModeHandler}
					btnType="Danger" >SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SINGUP'}</Button>
			</div>
			);
	
	}

}

const mapStateToProps = state => {
	return {
		loading: state.auth.loading,
		error: state.auth.error,
		isAuthenticated: state.auth.firetoken !== null, //will return true only if firetoken is present in our app
		buildingBurger: state.ingr.building,
		authRedirectPath: state.auth.authRedirectPath
	}
};

const mapDispatchToProps = dispatch => {
	return {
		onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),
		onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/')) // when called this will always reset the redirect path to '/'
	}
};


export default connect(mapStateToProps, mapDispatchToProps)(Auth);






